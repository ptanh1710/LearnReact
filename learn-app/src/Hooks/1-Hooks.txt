29 - Hook là gì

    - Là gắn vào / móc vào 

    (trong react có 2 loại component là class và function)

    -> là những method được viết sẵn, cung cấp bởi react js
    -> mỗi hook có những chức năng và khái niệm khác nhau
    -> (1) Chỉ dùng cho function component

    - Các loại hook:
        + useState
        + useEffect
        + useLayoutEffect
        + useRef
        + useCallback
        + useMemo
        + useReducer
        + useContext
        + useImperative
        + useDebugValue

    -> (2) Component đơn giản và dễ hiểu và đầy đủ tính năng
        - không bị chia logic ra như method trong lifecycle của class component
        - Không cần sử dụng 'this'
    
    -> (3) Sử dụng component như thế nào
        - Dự án mới => hooks
        - Dự án cũ
            + Component mới => Function Component + Hooks
            + Component cũ => Giữ nguyên, tối ưu sau
        - Logic nghiệp vụ cần sử dụng các tính chất của OOP => Class Component
    -> (4) Người mới nên bắt đầu với Function
    -> (5) Có thể kết hợp sử dụng Function và Class được không? Được

30 - useState 
 
    - Trạng thái của dữ liệu
    - Thể hiện trạng thái của người dùng ra giao diện
    - dữ liệu thay đổi -> giao diện thay đổi lại

    const [state, setState] = useState(initState)

        + state: gắn giá trị khởi tạo của initState
        + setState: Thay đổi state
        + initState: đổi số đầu vào - giá trị khởi tạo - chỉ dùng 1 lần

31 - useEffect

    - Khi render giao diện xong useEffect mới chạy
    - Side effect -> nói đến chưỡng trình phần mềm khi thay đổi
    - useEffect(callback, [dependencies])
        + callback: bắt buộc
        + [dependencies]: không bắt buộc

    - Các trường hợp
     +(1) useEffect với callback
     +(2) useEffect với callback, []
     +(3) useEffect với callback, [dependencies]

     => Cả 3 trường hợp
        + callback luôn được gọi sau khi component mounted
        + Clean up function: Dọn dẹp nhựng thứ trong bộ nhớ trước khi component unmount
        + Clean up function sẽ luôn luôn được gọi trước khi callback được gọi (trừ lần mounted)

        *(1) (ít dùng)
            + Gọi callback  mỗi khi component re-render 
            + Gọi callback sau khi component thêm element vào DOM

        *(2)
            + Chỉ gọi callback 1 lần sau khi component mounted
            + Chỉ dùng để call API hay xử lý logic chạy 1 lần

        *(3)
            + deps có thể là props, state - biến truyền từ ngoài vào
            + callback sẽ được gọi lại mỗi khi deps thay đổi

    - useEffect with DOM event

 32. useRef
    - Dùng để lưu 1 giá trị nào đó

    cosnt ref = useRef(initialValue)
        -> initialValue: Có thế có - không thì undefined

    - Có thể lưu trữ DOM element


 33. useMemo   
    - Giúp tránh thực hiện một logic nào đó không cần thiết
